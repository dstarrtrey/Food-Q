# source: https://us1.prisma.sh/david-l-starr-b3bc24/FoodQ/dev
# timestamp: Wed May 15 2019 09:51:16 GMT-0800 (GMT-08:00)

type AggregateMenuItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWaitListItem {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MenuItem implements Node {
  id: ID!
  name: String!
  cost: Int
  inStock: Boolean
}

"""A connection to a list of items."""
type MenuItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MenuItemEdge]!
  aggregate: AggregateMenuItem!
}

input MenuItemCreateInput {
  id: ID
  name: String!
  cost: Int
  inStock: Boolean
}

"""An edge in a connection."""
type MenuItemEdge {
  """The item at the end of the edge."""
  node: MenuItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MenuItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  cost_ASC
  cost_DESC
  inStock_ASC
  inStock_DESC
}

type MenuItemPreviousValues {
  id: ID!
  name: String!
  cost: Int
  inStock: Boolean
}

type MenuItemSubscriptionPayload {
  mutation: MutationType!
  node: MenuItem
  updatedFields: [String!]
  previousValues: MenuItemPreviousValues
}

input MenuItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MenuItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MenuItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MenuItemSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MenuItemWhereInput
}

input MenuItemUpdateInput {
  name: String
  cost: Int
  inStock: Boolean
}

input MenuItemUpdateManyMutationInput {
  name: String
  cost: Int
  inStock: Boolean
}

input MenuItemWhereInput {
  """Logical AND on all given filters."""
  AND: [MenuItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [MenuItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MenuItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  cost: Int

  """All values that are not equal to given value."""
  cost_not: Int

  """All values that are contained in given list."""
  cost_in: [Int!]

  """All values that are not contained in given list."""
  cost_not_in: [Int!]

  """All values less than the given value."""
  cost_lt: Int

  """All values less than or equal the given value."""
  cost_lte: Int

  """All values greater than the given value."""
  cost_gt: Int

  """All values greater than or equal the given value."""
  cost_gte: Int
  inStock: Boolean

  """All values that are not equal to given value."""
  inStock_not: Boolean
}

input MenuItemWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createMenuItem(data: MenuItemCreateInput!): MenuItem!
  createWaitListItem(data: WaitListItemCreateInput!): WaitListItem!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateMenuItem(data: MenuItemUpdateInput!, where: MenuItemWhereUniqueInput!): MenuItem
  updateWaitListItem(data: WaitListItemUpdateInput!, where: WaitListItemWhereUniqueInput!): WaitListItem
  deleteUser(where: UserWhereUniqueInput!): User
  deleteMenuItem(where: MenuItemWhereUniqueInput!): MenuItem
  deleteWaitListItem(where: WaitListItemWhereUniqueInput!): WaitListItem
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertMenuItem(where: MenuItemWhereUniqueInput!, create: MenuItemCreateInput!, update: MenuItemUpdateInput!): MenuItem!
  upsertWaitListItem(where: WaitListItemWhereUniqueInput!, create: WaitListItemCreateInput!, update: WaitListItemUpdateInput!): WaitListItem!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyMenuItems(data: MenuItemUpdateManyMutationInput!, where: MenuItemWhereInput): BatchPayload!
  updateManyWaitListItems(data: WaitListItemUpdateManyMutationInput!, where: WaitListItemWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyMenuItems(where: MenuItemWhereInput): BatchPayload!
  deleteManyWaitListItems(where: WaitListItemWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  menuItems(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuItem]!
  waitListItems(where: WaitListItemWhereInput, orderBy: WaitListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WaitListItem]!
  user(where: UserWhereUniqueInput!): User
  menuItem(where: MenuItemWhereUniqueInput!): MenuItem
  waitListItem(where: WaitListItemWhereUniqueInput!): WaitListItem
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  menuItemsConnection(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MenuItemConnection!
  waitListItemsConnection(where: WaitListItemWhereInput, orderBy: WaitListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WaitListItemConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  menuItem(where: MenuItemSubscriptionWhereInput): MenuItemSubscriptionPayload
  waitListItem(where: WaitListItemSubscriptionWhereInput): WaitListItemSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  password: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  password: String
}

input UserUpdateManyMutationInput {
  username: String
  password: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

type WaitListItem implements Node {
  id: ID!
  name: String!
  partySize: Int!
  phoneNumber: Int
}

"""A connection to a list of items."""
type WaitListItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WaitListItemEdge]!
  aggregate: AggregateWaitListItem!
}

input WaitListItemCreateInput {
  id: ID
  name: String!
  partySize: Int!
  phoneNumber: Int
}

"""An edge in a connection."""
type WaitListItemEdge {
  """The item at the end of the edge."""
  node: WaitListItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WaitListItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  partySize_ASC
  partySize_DESC
  phoneNumber_ASC
  phoneNumber_DESC
}

type WaitListItemPreviousValues {
  id: ID!
  name: String!
  partySize: Int!
  phoneNumber: Int
}

type WaitListItemSubscriptionPayload {
  mutation: MutationType!
  node: WaitListItem
  updatedFields: [String!]
  previousValues: WaitListItemPreviousValues
}

input WaitListItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WaitListItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WaitListItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WaitListItemSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WaitListItemWhereInput
}

input WaitListItemUpdateInput {
  name: String
  partySize: Int
  phoneNumber: Int
}

input WaitListItemUpdateManyMutationInput {
  name: String
  partySize: Int
  phoneNumber: Int
}

input WaitListItemWhereInput {
  """Logical AND on all given filters."""
  AND: [WaitListItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [WaitListItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WaitListItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  partySize: Int

  """All values that are not equal to given value."""
  partySize_not: Int

  """All values that are contained in given list."""
  partySize_in: [Int!]

  """All values that are not contained in given list."""
  partySize_not_in: [Int!]

  """All values less than the given value."""
  partySize_lt: Int

  """All values less than or equal the given value."""
  partySize_lte: Int

  """All values greater than the given value."""
  partySize_gt: Int

  """All values greater than or equal the given value."""
  partySize_gte: Int
  phoneNumber: Int

  """All values that are not equal to given value."""
  phoneNumber_not: Int

  """All values that are contained in given list."""
  phoneNumber_in: [Int!]

  """All values that are not contained in given list."""
  phoneNumber_not_in: [Int!]

  """All values less than the given value."""
  phoneNumber_lt: Int

  """All values less than or equal the given value."""
  phoneNumber_lte: Int

  """All values greater than the given value."""
  phoneNumber_gt: Int

  """All values greater than or equal the given value."""
  phoneNumber_gte: Int
}

input WaitListItemWhereUniqueInput {
  id: ID
}
